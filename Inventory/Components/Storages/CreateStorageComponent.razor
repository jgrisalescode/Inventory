@using Entities
@using Business

    <EditForm Model="newStorage">
        <div class="form-group">
            <label>Bodega:</label>
            <InputSelect @bind-Value="@newStorage.WarehouseId" class="form-control">
                <option value="">Seleccione una bodega</option>
                @foreach (var warehose in warehouses)
                {
                    <option value="@warehose.WarehouseId">@warehose.WarehouseName</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label>Producto:</label>
            <InputSelect @bind-Value="@newStorage.ProductId" class="form-control">
                <option value="">Seleccione un producto</option>
                @foreach (var product in products)
                {
                    <option value="@product.ProductId">@product.ProductName</option>
                }
            </InputSelect>
        </div>
        <input type="button" value="Almacenar producto" @onclick="SaveStorage" class="btn btn-primary"/>
    </EditForm>
<div class="text-center h4">
    @message
</div>

@code {
    StorageEntity newStorage = new StorageEntity();
    // Lamamos a las bodegas y los productos
    List<WarehouseEntity> warehouses = new List<WarehouseEntity>();
    List<ProductEntity> products = new List<ProductEntity>();

    string message;

    // Cargamos las listas al iniciar el componente
    protected override async Task OnInitializedAsync()
    {
        warehouses = B_Warehouse.WarehousesList();
        products = B_Product.ProductsList();
    }

    private void SaveStorage()
    {
        newStorage.StorageId = $"{newStorage.WarehouseId}--{newStorage.ProductId}";
        // Ya existe en la bodega?
        if (!B_Storage.IsProductInWarehouse(newStorage.StorageId))
        {
            newStorage.LastUpdate = DateTime.Now;
            B_Storage.CreateStorage(newStorage);
            message = "Producto registrado";
        }
        else
        {
            message = "Producto ya existe en la bodega";
        }
    }
}
